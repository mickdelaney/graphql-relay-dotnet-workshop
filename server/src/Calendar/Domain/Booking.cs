// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using NodaTime;

#nullable enable

namespace Workshop.Calendar.Api
{
    [Index(nameof(Uid), Name = "Booking.uid_unique", IsUnique = true)]
    public partial class Booking
    {
        public Booking()
        {
            Attendee = new HashSet<Attendee>();
            BookingReference = new HashSet<BookingReference>();
            Payment = new HashSet<Payment>();
        }

        [Key]
        [Column("id")]
        public int Id { get; set; }
        [Required]
        [Column("uid")]
        public string Uid { get; set; } = default!;
        [Column("userId")]
        public int? UserId { get; set; }
        [Column("eventTypeId")]
        public int? EventTypeId { get; set; }
        [Required]
        [Column("title")]
        public string Title { get; set; } = default!;
        [Column("description")]
        public string? Description { get; set; }
        [Column("startTime", TypeName = "timestamp(3) without time zone")]
        public Instant StartTime { get; set; }
        [Column("endTime", TypeName = "timestamp(3) without time zone")]
        public Instant EndTime { get; set; }
        [Column("location")]
        public string? Location { get; set; }
        [Column("createdAt", TypeName = "timestamp(3) without time zone")]
        public Instant CreatedAt { get; set; }
        [Column("updatedAt", TypeName = "timestamp(3) without time zone")]
        public Instant? UpdatedAt { get; set; }
        [Required]
        [Column("confirmed")]
        public bool? Confirmed { get; set; }
        [Column("rejected")]
        public bool Rejected { get; set; }
        [Column("paid")]
        public bool Paid { get; set; }

        [ForeignKey(nameof(EventTypeId))]
        [InverseProperty("Booking")]
        public virtual EventType? EventType { get; set; }
        [ForeignKey(nameof(UserId))]
        [InverseProperty(nameof(Users.Booking))]
        public virtual Users? User { get; set; }
        [InverseProperty("Booking")]
        public virtual DailyEventReference? DailyEventReference { get; set; }
        [InverseProperty("Booking")]
        public virtual ICollection<Attendee> Attendee { get; set; }
        [InverseProperty("Booking")]
        public virtual ICollection<BookingReference> BookingReference { get; set; }
        [InverseProperty("Booking")]
        public virtual ICollection<Payment> Payment { get; set; }
    }
}